<mxfile host="app.diagrams.net" modified="2023-11-22T22:24:44.238Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36" etag="8JQt2CurycO3aFv9NqCv" version="22.1.3" type="github">
  <diagram name="Page-1" id="4AUQO8ntI7T_bkYOzkIM">
    <mxGraphModel dx="1949" dy="686" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="sbTvdHXyslM2u_74zGHr-24" value="Model Exposed To Domain &amp;amp; Presentation Layers&lt;br&gt;(optional)" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=middle;align=center;" vertex="1" parent="1">
          <mxGeometry x="470" y="460" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-23" value="Serialised Model" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=middle;align=center;" vertex="1" parent="1">
          <mxGeometry x="280" y="360" width="100" height="50" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-21" value="Entity (aka model) Represents Same Data In API Model" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="650" y="360" width="140" height="50" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-1" value="&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Spotify&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;b style=&quot;font-size: 15px;&quot;&gt;- Home Screen&lt;br&gt;&lt;/b&gt;- Search&lt;br&gt;- Music Player" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="60" y="38" width="130" height="90" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-2" value="&lt;b&gt;Features:&lt;br&gt;&lt;/b&gt;- Persistent Cache / Offline mode&lt;br&gt;- Infinite scrolling&lt;br&gt;- Fetching data from API&lt;br&gt;- Image loading / looping video (gif?)" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="60" y="140" width="220" height="90" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-3" value="&lt;b&gt;Topics:&lt;br&gt;&lt;/b&gt;- Modularisation&lt;br&gt;- Persistent Caching&lt;br&gt;- Pagination&lt;br&gt;- Testability &amp;amp; Integration Tests&lt;br&gt;- Architecture Patterns (MVVM State Management&amp;nbsp; vs MVP)" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="60" y="235" width="340" height="100" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-7" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="sbTvdHXyslM2u_74zGHr-4" target="sbTvdHXyslM2u_74zGHr-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-4" value="API" style="ellipse;shape=cloud;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="210" y="390" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-5" value="Room DB" style="shape=cylinder3;whiteSpace=wrap;html=1;boundedLbl=1;backgroundOutline=1;size=15;" vertex="1" parent="1">
          <mxGeometry x="610" y="387" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-20" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sbTvdHXyslM2u_74zGHr-6" target="sbTvdHXyslM2u_74zGHr-19">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-6" value="HomeRepo" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="400" y="400" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-8" value="" style="endArrow=classic;html=1;rounded=0;exitX=1;exitY=0.25;exitDx=0;exitDy=0;" edge="1" parent="1" source="sbTvdHXyslM2u_74zGHr-6">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="490" y="530" as="sourcePoint" />
            <mxPoint x="600" y="415" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-9" value="" style="endArrow=classic;html=1;rounded=0;entryX=1;entryY=0.75;entryDx=0;entryDy=0;" edge="1" parent="1" target="sbTvdHXyslM2u_74zGHr-6">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="600" y="445" as="sourcePoint" />
            <mxPoint x="540" y="480" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-17" value="HomeScreen Content" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-20" y="390" width="200" height="390" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-18" value="HomeScreen Filters&lt;br&gt;&lt;br&gt;Recent Artists/Podcasts&lt;br&gt;&lt;br&gt;Podcast Similar to x&lt;br&gt;&lt;br&gt;Somewhat Recent Playlists&lt;br&gt;&lt;br&gt;Recently Played&lt;br&gt;&lt;br&gt;Your Top Mixes&lt;br&gt;&lt;br&gt;Today&#39;s Biggest Hits&lt;br&gt;&lt;br&gt;Less Recent Playlists&lt;br&gt;&lt;br&gt;Time To Wind Down&lt;br&gt;&lt;br&gt;Made For You&lt;br&gt;&lt;br&gt;Similar To Your Playlist&lt;br&gt;&lt;br&gt;Your Shows" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="sbTvdHXyslM2u_74zGHr-17">
          <mxGeometry x="10" y="25" width="190" height="365" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-19" value="HomeVM" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="400" y="570" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-22" value="&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;b&gt;Read Strategy&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;We only display data from the db.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;- First, db data is displayed&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;- Second, Network is requested and db is updated if required&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;- Third, update the ui again with the latest data in the db (if any)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Why Do This?&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;- This ensures the user sees data as quickly as possible instead of being shown a loading screen.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;- We can then listen for an update in the db to update the UI, or wait until the user eventually refreshes or onResume is called to refresh the data to display.&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="670" y="410" width="340" height="200" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-25" value="What if user deletes a song from a playlist or favourites, unfavourites a song whilst offline?&lt;br&gt;&lt;br&gt;The playlist and favourite songs will be stored in Room, Room will be updated with these actions and a queue of POST requests will be created ready to action these tasks on the backend the moment the user is reconnected to the internet." style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="670" y="610" width="340" height="120" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-26" value="&amp;nbsp;&lt;br&gt;HomeRepo(&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;homeAPI: HomeApiService,&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;homeDb: HomeDao&lt;br&gt;) {&lt;br&gt;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;suspend fun getHomeData(): Flow&amp;lt;HomeModel&amp;gt; {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;homeDb.getHomeData()&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;}&lt;br&gt;&lt;br&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="660" y="760" width="340" height="180" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-27" value="We return a Flow instead of a &quot;Single&quot; because the db will be updated when the app connects to a network and we want the user to see the latest data once it&#39;s available, therefore we need to use the observer pattern so that our VM can listen to changes in the Db/HomeRepo" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1010" y="760" width="340" height="120" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-28" value="&lt;b&gt;Error Handling Scenarios For Reads&lt;/b&gt;&lt;br&gt;&lt;br&gt;Error During db Read:&lt;br&gt;This scenario should be unlikely, you can simply do a try/catch or create an Exception Handler, that displays an empty state, loading or error state while you retry the fetch.&lt;br&gt;&lt;br&gt;Error During Network Read:&lt;br&gt;- Retry the connection with exponential backoff&lt;br&gt;or&lt;br&gt;- Before attempting to fetch data, queue up all of the work required to send to the backend, then first send a small request to see if the backend is available, if available then fetch data and process the queue, if it&#39;s not available, then wait until it is." style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1030" y="410" width="330" height="250" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-29" value="&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;b&gt;Write Strategy&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;We save to db any writes, then queue them for synchronisation&amp;nbsp;with the backend.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;We might consider having a timeStamp with actions to choose the most recent when synchronising.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1370" y="410" width="340" height="120" as="geometry" />
        </mxCell>
        <mxCell id="sbTvdHXyslM2u_74zGHr-31" value="Synchronisation Strategies&lt;br&gt;&lt;br&gt;Push - This is the standard, request data when landing on a screen.&lt;br&gt;&lt;br&gt;Pull - This requires the db to have the same data as the network.&lt;br&gt;&lt;br&gt;The network will notify the app when it is out of date.&lt;br&gt;&lt;br&gt;Or the app can make a tiny request and receive a boolean to know if it&#39;s out of date or not." style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1720" y="410" width="270" height="120" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
